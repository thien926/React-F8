// https://fullstack.edu.vn/blog/phan-1-tao-du-an-reactjs-voi-webpack-va-babel.html
// Video 20

1.  npm init
2.  npm install webpack webpack-cli --save-dev
3.  npm install react react-dom --save
4.  npm install @babel/core babel-loader @babel/preset-env @babel/preset-react --save-dev

    babel-core: Chuyển đổi ES6 về ES5
    babel-loader: Cho phép chuyển các files Javascript sử dụng Babel & Webpack
    babel-preset-env: Cài đặt sẵn giúp bạn sử dụng Javascript mới nhất trên nhiều môi trường khác nhau (nhiều trình duyệt khác nhau). Gói này đơn giản là support truyển đổi ES6, ES7, ES8, ES… về ES5.
    babel-preset-react: Hỗ trợ chuyển đổi JSX về Javascript

5.  Tại thư mục public tạo file index.html
6.  Tại thư mục src tạo file index.js
    import React from 'react' // nạp thư viện react
    import ReactDOM from 'react-dom' // nạp thư viện react-dom

    // Tạo component App
    function App() {
        return (
            <div>
                <h1>Xin chào anh em F8!</h1>
            </div>
        )
    }

    // Render component App vào #root element
    ReactDOM.render(<App />, document.getElementById('root'))

============== CẤU HÌNH WEBPACK =============

1.  npm install css-loader style-loader --save-dev
2.  Tạo file webpack.config.js tại thư mục gốc của dự án với nội dung sau:
    const path = require("path");

    module.exports = {
        entry: "./src/index.js", // Dẫn tới file index.js ta đã tạo
        output: {
            path: path.join(__dirname, "/build"), // Thư mục chứa file được build ra
            filename: "bundle.js" // Tên file được build ra
        },
        module: {
            rules: [
                {
                    test: /\.js$/, // Sẽ sử dụng babel-loader cho những file .js
                    exclude: /node_modules/, // Loại trừ thư mục node_modules
                    use: ["babel-loader"]
                },
                {
                    test: /\.css$/, // Sử dụng style-loader, css-loader cho file .css
                    use: ["style-loader", "css-loader"]
                }
            ]
        },
        // Chứa các plugins sẽ cài đặt trong tương lai
        plugins: [
        ]
    };
3.  Tại thư mục gốc dự án tạo file .babelrc và thêm nội dung sau(Cài đặt này để cho Babel
    biết sử dụng preset-env và preset-react trong việc hỗ trợ chuyển đổi mã):
    {
        "presets": [
            "@babel/preset-env",
            "@babel/preset-react"
        ]
    }

4.  Tại package.json thêm nội dung sau:
    "scripts": {
        ...
        "start": "webpack --mode development --watch",
        "build": "webpack --mode production"
    }

=================== CHẠY DỰ ÁN (Cách 1) ================
1.  Biên dịch code với Webpack: npm start
2.  Chạy dự án với Live Server (VSCode)
    2.1 Tại public/index.html, thêm thẻ script link tới file build/bundle.js:
        <script src="../build/bundle.js"></script>
    2.2 Chạy dự án với Live Server
==> npm start => live server public/index.html

  ============ Cài đặt html-webpack-plugin (Cách chạy dự án cách 2: chạy live server ở build/index.html) ======
3.  npm install html-webpack-plugin --save-dev
4.  Tại webpack.config.js hãy thêm:
    ...
    const HtmlWebpackPlugin = require("html-webpack-plugin");

    module.exports = {
        ...
        // Chứa các plugins sẽ cài đặt trong tương lai
        plugins: [
            new HtmlWebpackPlugin({
                template: "./public/index.html"
            })
        ]
    };

==> npm start => live server build/index.html

  =========== Cài đặt webpack-dev-server ======
5.  npm install webpack-dev-server --save-dev
6.  Sửa lại cấu hình scripts trong package.json:
    "scripts": {
        ...
        "start": "webpack-dev-server --mode development --open --hot",
        ...
    }

==> npm start
